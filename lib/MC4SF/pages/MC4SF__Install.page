<apex:page tabStyle="MC_Setup__tab" controller="MC4SF.InstallController" action="{!initPage}">

<apex:sectionHeader title="MailChimp for Salesforce" subtitle="Install"/>

<apex:form id="form">

<apex:pageMessages />

<apex:pageBlock id="step1" title="Step 1: Authenticate" rendered="{!isMailChimpAdmin && step == 'Step 1'}">
    <div style="text-align: center;">
        <table style="margin-left: auto; margin-right: auto;">
            <tr>
                <td align="left">
                    <apex:commandButton value="Login" action="{!login}" onclick="alert('You will be temporarily redirected to MailChimp to authenticate and will be returned to salesforce.com upon completion.');"/>
                        
                    <br/><br/>
                    <a href="http://kb.mailchimp.com/article/i-cant-log-in-to-my-mailchimp-account" target="_blank">Forgot password?</a><br/><br/>
                    Don't have an account? <a href="https://login.mailchimp.com/signup/" target="_blank">Sign up for free</a>
                </td>
                <td width="100"><br/></td>
                <td>
                    <div style="background-color: #fff; -webkit-border-radius: 8px; border-radius: 8px; width: 350px; text-align: left; padding: 15px;">
                        <span style="font-family: Arial; font-size: 18px; font-weight: normal; color: #333;">MailChimp can help!</span><br/><br/>
                        We're here to help. Send us an email at <a href="mailto:salesforce@mailchimp.com">salesforce@mailchimp.com</a> and we'll be sure to respond shortly.<br/><br/>
                        <a href="http://kb.mailchimp.com/article/what-is-mailchimp-for-salesforce" target="_blank">About MailChimp for Salesforce</a><br/><br/>
                        <a href="http://kb.mailchimp.com/article/how-do-i-install-mailchimp-for-salesforce" target="_blank">Installation Guide</a>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</apex:pageBlock>

<apex:pageBlock id="step2" title="Step 2: Lead Creation" rendered="{!isMailChimpAdmin && step == 'Step 2'}">
    <apex:pageBlockButtons >
        <apex:commandButton id="step2ComeBackLaterButton" value="Come Back Later" action="{!saveStep2}" styleClass="{!IF(shouldLoadMergeVars, 'btnDisabled', '')}"/>
        <apex:commandButton id="readyToMapFieldsButton" value="I am Ready to Map Fields" action="{!saveStep2AndMapFields}" styleClass="{!IF(shouldLoadMergeVars, 'btnDisabled', '')}"/>
    </apex:pageBlockButtons>

    This app can create leads in Salesforce based on subscriber email addresses from MailChimp. If you would like to create Salesforce leads from MailChimp subscribers during this installation process, check the <b>Allow MailChimp to create Leads in Salesforce?</b> box below. 

    Please be sure to note the following:
    <ul>
        <li>The initial lead sync process will function to create Salesforce leads for all existing MailChimp subscribers that don’t already exist in the Salesforce Org as a contact or lead (based on their email address). It’s important to note that the lead creation will only function to create Salesforce leads with the default fields (Email Address, First Name, Last Name).
        </li>
        <li>
            Make sure that the Salesforce Org is configured to handle new leads:<ul>
                <li>Review your lead assignment rules. Verify that any automated lead assignment processes are in place for MailChimp-generated leads.</li>
                <li>Review auto-response or workflow rules for MailChimp-generated leads.</li>
                <li>Review any triggers defined for the Salesforce lead record type.</li>
                <li>Check required fields and validation rules for Salesforce leads before enabling lead creation. If the MailChimp subscribers don’t meet the field or validation rule requirements for Salesforce lead creation, then it won’t be possible to utilize this feature.</li>
            </ul>
        </li>
        <li>It’s possible to enable lead creation after the field mapping process using the checkbox on the MC Setup tab. Any subscribers added to the MailChimp list after lead creation is enabled will be added to Salesforce as leads; however, it won’t retroactively create Salesforce leads from the existing MailChimp subscribers.</li>
    </ul>
    
    <apex:inputCheckbox value="{!allowMailChimpToCreateLeads}"/> <b>Allow MailChimp to create Leads in Salesforce?</b>
    
    <apex:outputPanel layout="none" rendered="{!shouldLoadMergeVars}">
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script>
            var mcLists = {!mcListsJson};
            var mcListCount = mcLists.length;
    
            // Turn off buffering so that all remoting calls are made one at a time in order.
            Visualforce.remoting.buffer = false;

            jQuery(function() {
    
                // Disable the Come Back Later and Ready To Map Fields buttons until all lists are loaded.
                jQuery('input[id$="step2ComeBackLaterButton"]').removeClass('btn').attr('disabled', 'disabled');
                jQuery('input[id$="readyToMapFieldsButton"]').removeClass('btn').attr('disabled', 'disabled');
                        
                // Add cell in header to place load status message.
                jQuery('div.pbHeader td.pbTitle').closest('tr').append('<td class="pbHelp listLoadStatus"/>');

                if (mcListCount > 0) {
                    loadMergeVars();
                }
            
            });
    
            function loadMergeVars() {
                if (mcLists.length == 0) {
                    // Update load status message.
                    jQuery('td.listLoadStatus').html('<span style="color: green">All lists loaded</span>');
                    
                    // Enable the Come Back Later and Ready To Map Fields buttons.
                    jQuery('input[id$="step2ComeBackLaterButton"]').toggleClass('btn btnDisabled').removeAttr('disabled');
                    jQuery('input[id$="readyToMapFieldsButton"]').toggleClass('btn btnDisabled').removeAttr('disabled');
                    
                    return;
                }
    
                var mcList = mcLists.shift();
                
                jQuery('td.listLoadStatus').html('<span style="color: orange">Loading list ' + (mcListCount - mcLists.length) + ' of ' + mcListCount + ' - ' + mcList.Name + '</span>');
    
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.InstallController.loadMergeVars}', mcList.Id, function(result, event) {
                    if (event.status) {
                        loadMergeVars();
                    } else {
                        alert('Error loading merge variables for List.');
                    }
                });
            }
        </script>
    </apex:outputPanel>
</apex:pageBlock>

<apex:pageBlock id="step3" title="Step 3: Map Fields - {!currentMcList.Name}" rendered="{!isMailChimpAdmin && step == 'Step 3'}">
    <apex:pageBlockButtons >
        <apex:commandButton value="Come Back Later" action="{!saveStep3}"/>
        <apex:commandButton value="Save" action="{!saveStep3AndNext}"/>
    </apex:pageBlockButtons>

    <c:Mappings listId="{!currentMcList.Id}" baseController="{!mappingsBaseController}"/>
</apex:pageBlock>

</apex:form>

</apex:page>